{"version":3,"sources":["InputBox.js","OutputBox.js","DarkModeToggle/DarkModeToggle.js","App.js","index.js"],"names":["InputBox","React","forwardRef","props","ref","id","onChange","value","onKeyDown","createMarkup","marked","safeHtml","replace","blockQuotesArray","match","Array","isArray","i","length","replaceAll","substring","codeArray","he","require","decode","setOptions","highlight","code","language","hljs","validLanguage","getLanguage","breaks","markdownText","codeTagArray","__html","OutputBox","dangerouslySetInnerHTML","window","this","Component","CssStyleSheet","ReactDOM","createPortal","rel","href","Css","type","document","head","DarkModeToggle","selectedOption","localStorage","getItem","state","darkMode","setLightMode","bind","setDarkMode","e","setState","setItem","className","darkModeCss","lightModeCss","name","checked","htmlFor","App","event","keyCode","preventDefault","target","selectionStart","selectionEnd","text","inputBoxRef","current","inputChange","createRef","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.06b78d19.chunk.js","sourcesContent":["import React from 'react';\n\nconst InputBox = React.forwardRef((props, ref) => (\n    <div id=\"input-box\">\n        <textarea ref={ref} id=\"editor\" onChange={props.onChange} value={props.value} onKeyDown={props.onKeyDown} />\n    </div>\n));\n\nexport default InputBox;\n","import React from 'react';\n\nfunction escapeHtml(unsafe) {\n    return unsafe\n         .replace(/&/g, \"&amp;\")\n         .replace(/</g, \"&lt;\")\n         .replace(/>/g, \"&gt;\")\n         .replace(/\"/g, \"&quot;\")\n         .replace(/'/g, \"&#039;\");\n}\n\nfunction createMarkup(marked, value) {\n    //escape input text (html)\n    let safeHtml = escapeHtml(value);\n\n    //decode \">\" character so that blockquotes are detected\n    let blockQuotesArray = safeHtml.match(/(\\n|\\r|\\r\\n)(&gt;)(.*)|^(&gt;)(.*)/g);\n    if (Array.isArray(blockQuotesArray)) {\n        //console.log(blockQuotesArray);\n        for (let i= 0; i < blockQuotesArray.length; i++) {\n            if (blockQuotesArray[i][0] === \"\\n\") {\n                safeHtml = safeHtml.replaceAll(blockQuotesArray[i], \"\\n>\" + blockQuotesArray[i].substring(5));\n            }\n            else {\n                safeHtml = safeHtml.replaceAll(blockQuotesArray[i], \">\" + blockQuotesArray[i].substring(5));\n            }\n        }\n    }\n\n    //html decode text betweem backticks\n    let codeArray = safeHtml.match(/`(.*?)`/g);\n    let he = require('he');\n    if (Array.isArray(codeArray)) {\n        for (let i= 0; i < codeArray.length; i++) {\n            safeHtml = safeHtml.replaceAll(codeArray[i], he.decode(codeArray[i]));\n        }\n    }\n\n    //html decode text betweem triple backticks\n    codeArray = safeHtml.match(/```(.*?)```/gs);\n    if (Array.isArray(codeArray)) {\n        for (let i= 0; i < codeArray.length; i++) {\n            safeHtml = safeHtml.replaceAll(codeArray[i], he.decode(codeArray[i]));\n        }\n    }\n\n    //use marked function to return markdown encoded text\n    marked.setOptions({\n        highlight: function(code, language) {\n            const hljs = require('highlight.js');\n            const validLanguage = hljs.getLanguage(language) ? language : 'plaintext';\n            return hljs.highlight(validLanguage, code).value;\n        },\n        breaks: true\n    });\n    let markdownText = marked(safeHtml);\n\n    //replace newlines with <br> inside code tags\n    let codeTagArray = markdownText.match(/<code(.*?)>(.*?)<\\/code>/gs);\n    if (Array.isArray(codeTagArray)) {\n        for (let i= 0; i < codeTagArray.length; i++) {\n            markdownText = markdownText.replaceAll(codeTagArray[i], codeTagArray[i].replace(/(?:\\r\\n|\\r|\\n)/g, \"<br>\"));\n        }\n    }\n\n    //remove newlines from html code\n    markdownText = markdownText.replace(/(?:\\r\\n|\\r|\\n)/g, '');\n    //console.log(markdownText);\n\n    return {__html: markdownText};\n}\n\nexport default class OutputBox extends React.Component {\n    render() {\n        return (\n            <div id=\"output-box\">\n                <div id=\"preview\" dangerouslySetInnerHTML={createMarkup(window.marked, this.props.value)} />\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './DarkModeToggle.css'\n\nclass CssStyleSheet extends React.Component {\n    render() {\n      return ReactDOM.createPortal(\n          (<link rel=\"stylesheet\" href={this.props.Css} type=\"text/css\"></link>),\n        document.head\n      );\n    }\n  }\n\nexport default class DarkModeToggle extends React.Component {\n    constructor(props) {\n        super(props);\n        let selectedOption = localStorage.getItem('DarkMode') === \"true\" ? true : false;\n        this.state = {\n            darkMode: selectedOption\n        }\n        this.setLightMode = this.setLightMode.bind(this);\n        this.setDarkMode = this.setDarkMode.bind(this);\n    }\n\n    setLightMode(e) {\n        this.setState({\n          darkMode: false\n        });\n        localStorage.setItem('DarkMode', false);\n      }\n\n    setDarkMode(e) {\n        this.setState({\n            darkMode: true\n        });\n        localStorage.setItem('DarkMode', true);\n    }\n\n    render() {\n        return (\n            <div id=\"dark-mode-toggle\" className=\"dark-mode-toggle\">\n                { this.state.darkMode && <CssStyleSheet Css={this.props.darkModeCss} />}\n                { !this.state.darkMode && <CssStyleSheet Css={this.props.lightModeCss} />}\n                <input type=\"radio\" id=\"light\" name=\"light\" value=\"light\" onChange={this.setLightMode} checked={!this.state.darkMode} />\n                <label htmlFor=\"light\">Light</label>\n                <input type=\"radio\" id=\"dark\" name=\"dark\" value=\"dark\" onChange={this.setDarkMode} checked={this.state.darkMode} />\n                <label htmlFor=\"dark\">Dark</label>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport InputBox from './InputBox';\nimport OutputBox from './OutputBox';\nimport DarkModeToggle from './DarkModeToggle/DarkModeToggle';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: `# Markdown Preview\nWrite text on the black textbox and see real time how it looks on markdown format. Markdown is a text to html conversion format developed on 2004 by John Gruber and Aaron Swartz. See the [official Markdown website](https://daringfireball.net/projects/markdown)\n\n## Examples:\n\n### Code block:\nSome inline code \\`<div></div>\\`, and multiline code:\n\n\\`\\`\\`c\n//c language code block\n\nint i = 0;\n\\`\\`\\`\n\n### Bold/Italic\n**bold** _italic_. and **_both!_**\n\n### Quotes\n> Quoted text\n\n### Tables\n\nColumn 1 | Column 2 | Column 3\n------------ | ------------- | -------------\nRow 1, C1 | Row 1, C2 | Row 1, C3\nRow 2, C1 | Row 2, C2 | Row 2, C3\n\n### Lists\nBullets:\n- bullet 1\n  - bulelet 2\n    - bullet 3\n\nNumbered:\n1. one\n1. two\n1. three\n\n### Image\n![Markdown Logo](/markdown-previewer/markdown-192.png)\n\n`\n    }\n    this.inputChange = this.inputChange.bind(this);\n    this.inputBoxRef = React.createRef();\n  }\n\n  inputChange(event) {\n    this.setState({\n      text: event.target.value\n    });\n  }\n\n  onKeyDown = event => {\n    if (event.keyCode === 9) {\n        event.preventDefault();\n        const { selectionStart, selectionEnd } = event.target;\n        this.setState({\n          text: this.state.text.substring(0, selectionStart) + \"\\t\" + this.state.text.substring(selectionEnd)\n          },\n          () => {\n            this.inputBoxRef.current.selectionStart = this.inputBoxRef.current.selectionEnd = selectionStart + 1;\n          }\n        );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <DarkModeToggle lightModeCss=\"/markdown-previewer/App.css\" darkModeCss=\"/markdown-previewer/App-dark.css\" />\n        <InputBox onChange={this.inputChange} value={this.state.text} ref={this.inputBoxRef} onKeyDown={this.onKeyDown} />\n        <OutputBox value={this.state.text} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}