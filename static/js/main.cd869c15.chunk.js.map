{"version":3,"sources":["InputBox.js","OutputBox.js","DarkModeToggle/DarkModeToggle.js","GithubHeaderLink/GithubHeaderLink.js","App.js","index.js"],"names":["InputBox","React","forwardRef","props","ref","id","onChange","value","onKeyDown","createMarkup","marked","setOptions","highlight","code","language","hljs","require","validLanguage","getLanguage","breaks","markdownText","codeTagArray","match","Array","isArray","i","length","replaceAll","replace","__html","DOMPurify","sanitize","OutputBox","dangerouslySetInnerHTML","window","this","Component","CssStyleSheet","ReactDOM","createPortal","rel","href","Css","type","document","head","DarkModeToggle","selectedOption","localStorage","getItem","state","darkMode","setLightMode","bind","setDarkMode","e","setState","setItem","className","darkModeCss","lightModeCss","name","checked","htmlFor","GithubHeaderLink","style","position","top","left","right","marginLeft","marginRight","width","to","target","icon","faGithub","size","App","event","keyCode","preventDefault","selectionStart","selectionEnd","text","substring","inputBoxRef","current","inputChange","createRef","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cd869c15.chunk.js","sourcesContent":["import React from 'react';\n\nconst InputBox = React.forwardRef((props, ref) => (\n    <div id=\"input-box\">\n        <textarea ref={ref} id=\"editor\" onChange={props.onChange} value={props.value} onKeyDown={props.onKeyDown} />\n    </div>\n));\n\nexport default InputBox;\n","import React from 'react';\nimport DOMPurify from 'dompurify';\n\nfunction createMarkup(marked, value) {\n    //use marked function to return markdown encoded text\n    marked.setOptions({\n        highlight: function(code, language) {\n            const hljs = require('highlight.js');\n            const validLanguage = hljs.getLanguage(language) ? language : 'plaintext';\n            return hljs.highlight(validLanguage, code).value;\n        },\n        breaks: true\n    });\n    let markdownText = marked(value);\n\n    //replace newlines with <br> inside code tags\n    let codeTagArray = markdownText.match(/<code(.*?)>(.*?)<\\/code>/gs);\n    if (Array.isArray(codeTagArray)) {\n        for (let i= 0; i < codeTagArray.length; i++) {\n            markdownText = markdownText.replaceAll(codeTagArray[i], codeTagArray[i].replace(/(?:\\r\\n|\\r|\\n)/g, \"<br>\"));\n        }\n    }\n\n    //remove newlines from html code\n    markdownText = markdownText.replace(/(?:\\r\\n|\\r|\\n)/g, '');\n    //console.log(markdownText);\n\n    //sanitize before html output\n    markdownText = DOMPurify.sanitize(markdownText);\n\n    return {__html: markdownText};\n}\n\nexport default class OutputBox extends React.Component {\n    render() {\n        return (\n            <div id=\"output-box\">\n                <div id=\"preview\" dangerouslySetInnerHTML={createMarkup(window.marked, this.props.value)} />\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './DarkModeToggle.css'\n\nclass CssStyleSheet extends React.Component {\n    render() {\n      return ReactDOM.createPortal(\n          (<link rel=\"stylesheet\" href={this.props.Css} type=\"text/css\"></link>),\n        document.head\n      );\n    }\n  }\n\nexport default class DarkModeToggle extends React.Component {\n    constructor(props) {\n        super(props);\n        let selectedOption = localStorage.getItem('DarkMode') === \"true\" ? true : false;\n        this.state = {\n            darkMode: selectedOption\n        }\n        this.setLightMode = this.setLightMode.bind(this);\n        this.setDarkMode = this.setDarkMode.bind(this);\n    }\n\n    setLightMode(e) {\n        this.setState({\n          darkMode: false\n        });\n        localStorage.setItem('DarkMode', false);\n      }\n\n    setDarkMode(e) {\n        this.setState({\n            darkMode: true\n        });\n        localStorage.setItem('DarkMode', true);\n    }\n\n    render() {\n        return (\n            <div id=\"dark-mode-toggle\" className=\"dark-mode-toggle\">\n                { this.state.darkMode && <CssStyleSheet Css={this.props.darkModeCss} />}\n                { !this.state.darkMode && <CssStyleSheet Css={this.props.lightModeCss} />}\n                <input type=\"radio\" id=\"light\" name=\"light\" value=\"light\" onChange={this.setLightMode} checked={!this.state.darkMode} />\n                <label htmlFor=\"light\">Light</label>\n                <input type=\"radio\" id=\"dark\" name=\"dark\" value=\"dark\" onChange={this.setDarkMode} checked={this.state.darkMode} />\n                <label htmlFor=\"dark\">Dark</label>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\nimport { Link, BrowserRouter } from 'react-router-dom';\n\n\nexport default class GithubHeaderLink extends React.Component {\n    render() {\n      const divStyle = {\n        position: \"absolute\",\n        top: \"2vh\",\n        left: 0,\n        right: 0,\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        width: \"1.33em\"\n      };\n      return (\n        <div style={divStyle}>\n          <BrowserRouter>\n            <Link to={this.props.href} target=\"_blank\" className=\"github-header-link\">\n              <FontAwesomeIcon icon={faGithub} size=\"2x\" />\n            </Link>\n          </BrowserRouter>\n        </div>\n      );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport InputBox from './InputBox';\nimport OutputBox from './OutputBox';\nimport DarkModeToggle from './DarkModeToggle/DarkModeToggle';\nimport GithubHeaderLink from './GithubHeaderLink/GithubHeaderLink';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: `# Markdown Preview\nWrite text on the black textbox and see real time how it looks on markdown format. Markdown is a text to html conversion format developed on 2004 by John Gruber and Aaron Swartz. See the [official Markdown website](https://daringfireball.net/projects/markdown)\n\n## Examples:\n\n### Code block\nSome inline code \\`<div></div>\\`, and multiline code:\n\n\\`\\`\\`c\n//c language code block\n\nint i = 0;\n\\`\\`\\`\n\n### Bold/Italic\n**bold** _italic_. and **_both!_**\n\n### Quotes\n> Quoted text\n\n### Tables\n\nColumn 1 | Column 2 | Column 3\n------------ | ------------- | -------------\nRow 1, C1 | Row 1, C2 | Row 1, C3\nRow 2, C1 | Row 2, C2 | Row 2, C3\n\n### Lists\nBullets:\n- bullet 1\n  - bulelet 2\n    - bullet 3\n\nNumbered:\n1. one\n1. two\n1. three\n\n### Image\n![Markdown Logo](/markdown-previewer/markdown-192.png)\n\n`\n    }\n    this.inputChange = this.inputChange.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.inputBoxRef = React.createRef();\n  }\n\n  inputChange(event) {\n    this.setState({\n      text: event.target.value\n    });\n  }\n\n  onKeyDown = event => {\n    if (event.keyCode === 9) {\n        event.preventDefault();\n        const { selectionStart, selectionEnd } = event.target;\n        this.setState({\n          text: this.state.text.substring(0, selectionStart) + \"\\t\" + this.state.text.substring(selectionEnd)\n          },\n          () => {\n            this.inputBoxRef.current.selectionStart = this.inputBoxRef.current.selectionEnd = selectionStart + 1;\n          }\n        );\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <GithubHeaderLink href=\"//github.com/pepe386/markdown-previewer\" />\n        <DarkModeToggle lightModeCss=\"/markdown-previewer/App.css\" darkModeCss=\"/markdown-previewer/App-dark.css\" />\n        <InputBox onChange={this.inputChange} value={this.state.text} ref={this.inputBoxRef} onKeyDown={this.onKeyDown} />\n        <OutputBox value={this.state.text} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}